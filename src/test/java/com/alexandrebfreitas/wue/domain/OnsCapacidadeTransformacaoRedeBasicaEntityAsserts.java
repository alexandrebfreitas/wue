package com.alexandrebfreitas.wue.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class OnsCapacidadeTransformacaoRedeBasicaEntityAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertOnsCapacidadeTransformacaoRedeBasicaEntityAllPropertiesEquals(
        OnsCapacidadeTransformacaoRedeBasicaEntity expected,
        OnsCapacidadeTransformacaoRedeBasicaEntity actual
    ) {
        assertOnsCapacidadeTransformacaoRedeBasicaEntityAutoGeneratedPropertiesEquals(expected, actual);
        assertOnsCapacidadeTransformacaoRedeBasicaEntityAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertOnsCapacidadeTransformacaoRedeBasicaEntityAllUpdatablePropertiesEquals(
        OnsCapacidadeTransformacaoRedeBasicaEntity expected,
        OnsCapacidadeTransformacaoRedeBasicaEntity actual
    ) {
        assertOnsCapacidadeTransformacaoRedeBasicaEntityUpdatableFieldsEquals(expected, actual);
        assertOnsCapacidadeTransformacaoRedeBasicaEntityUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertOnsCapacidadeTransformacaoRedeBasicaEntityAutoGeneratedPropertiesEquals(
        OnsCapacidadeTransformacaoRedeBasicaEntity expected,
        OnsCapacidadeTransformacaoRedeBasicaEntity actual
    ) {
        assertThat(actual)
            .as("Verify OnsCapacidadeTransformacaoRedeBasicaEntity auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertOnsCapacidadeTransformacaoRedeBasicaEntityUpdatableFieldsEquals(
        OnsCapacidadeTransformacaoRedeBasicaEntity expected,
        OnsCapacidadeTransformacaoRedeBasicaEntity actual
    ) {
        assertThat(actual)
            .as("Verify OnsCapacidadeTransformacaoRedeBasicaEntity relevant properties")
            .satisfies(a -> assertThat(a.getIdSubsistema()).as("check idSubsistema").isEqualTo(expected.getIdSubsistema()))
            .satisfies(a -> assertThat(a.getNomSubsistema()).as("check nomSubsistema").isEqualTo(expected.getNomSubsistema()))
            .satisfies(a -> assertThat(a.getIdEstado()).as("check idEstado").isEqualTo(expected.getIdEstado()))
            .satisfies(a -> assertThat(a.getNomEstado()).as("check nomEstado").isEqualTo(expected.getNomEstado()))
            .satisfies(a ->
                assertThat(a.getNomTipotransformador()).as("check nomTipotransformador").isEqualTo(expected.getNomTipotransformador())
            )
            .satisfies(a ->
                assertThat(a.getNomAgenteproprietario()).as("check nomAgenteproprietario").isEqualTo(expected.getNomAgenteproprietario())
            )
            .satisfies(a -> assertThat(a.getNomSubestacao()).as("check nomSubestacao").isEqualTo(expected.getNomSubestacao()))
            .satisfies(a -> assertThat(a.getNomTransformador()).as("check nomTransformador").isEqualTo(expected.getNomTransformador()))
            .satisfies(a -> assertThat(a.getCodEquipamento()).as("check codEquipamento").isEqualTo(expected.getCodEquipamento()))
            .satisfies(a -> assertThat(a.getDatEntradaoperacao()).as("check datEntradaoperacao").isEqualTo(expected.getDatEntradaoperacao())
            )
            .satisfies(a -> assertThat(a.getDatDesativacao()).as("check datDesativacao").isEqualTo(expected.getDatDesativacao()))
            .satisfies(a ->
                assertThat(a.getValTensaoprimarioKv()).as("check valTensaoprimarioKv").isEqualTo(expected.getValTensaoprimarioKv())
            )
            .satisfies(a ->
                assertThat(a.getValTensaosecundarioKv()).as("check valTensaosecundarioKv").isEqualTo(expected.getValTensaosecundarioKv())
            )
            .satisfies(a ->
                assertThat(a.getValTensaoterciarioKv()).as("check valTensaoterciarioKv").isEqualTo(expected.getValTensaoterciarioKv())
            )
            .satisfies(a ->
                assertThat(a.getValPotencianominalMva()).as("check valPotencianominalMva").isEqualTo(expected.getValPotencianominalMva())
            )
            .satisfies(a -> assertThat(a.getNomTipoderede()).as("check nomTipoderede").isEqualTo(expected.getNomTipoderede()))
            .satisfies(a -> assertThat(a.getNumBarraPrimario()).as("check numBarraPrimario").isEqualTo(expected.getNumBarraPrimario()))
            .satisfies(a -> assertThat(a.getNumBarraSecundario()).as("check numBarraSecundario").isEqualTo(expected.getNumBarraSecundario())
            );
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertOnsCapacidadeTransformacaoRedeBasicaEntityUpdatableRelationshipsEquals(
        OnsCapacidadeTransformacaoRedeBasicaEntity expected,
        OnsCapacidadeTransformacaoRedeBasicaEntity actual
    ) {
        // empty method
    }
}
