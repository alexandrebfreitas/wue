package com.alexandrebfreitas.wue.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class OnsDadosIndicadoresQualidadeEnergiaRedeBasicaDfpDesempenhoFrequenciaEmRegimePermanenteEntityAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertOnsDadosIndicadoresQualidadeEnergiaRedeBasicaDfpDesempenhoFrequenciaEmRegimePermanenteEntityAllPropertiesEquals(
        OnsDadosIndicadoresQualidadeEnergiaRedeBasicaDfpDesempenhoFrequenciaEmRegimePermanenteEntity expected,
        OnsDadosIndicadoresQualidadeEnergiaRedeBasicaDfpDesempenhoFrequenciaEmRegimePermanenteEntity actual
    ) {
        assertOnsDadosIndicadoresQualidadeEnergiaRedeBasicaDfpDesempenhoFrequenciaEmRegimePermanenteEntityAutoGeneratedPropertiesEquals(
            expected,
            actual
        );
        assertOnsDadosIndicadoresQualidadeEnergiaRedeBasicaDfpDesempenhoFrequenciaEmRegimePermanenteEntityAllUpdatablePropertiesEquals(
            expected,
            actual
        );
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertOnsDadosIndicadoresQualidadeEnergiaRedeBasicaDfpDesempenhoFrequenciaEmRegimePermanenteEntityAllUpdatablePropertiesEquals(
        OnsDadosIndicadoresQualidadeEnergiaRedeBasicaDfpDesempenhoFrequenciaEmRegimePermanenteEntity expected,
        OnsDadosIndicadoresQualidadeEnergiaRedeBasicaDfpDesempenhoFrequenciaEmRegimePermanenteEntity actual
    ) {
        assertOnsDadosIndicadoresQualidadeEnergiaRedeBasicaDfpDesempenhoFrequenciaEmRegimePermanenteEntityUpdatableFieldsEquals(
            expected,
            actual
        );
        assertOnsDadosIndicadoresQualidadeEnergiaRedeBasicaDfpDesempenhoFrequenciaEmRegimePermanenteEntityUpdatableRelationshipsEquals(
            expected,
            actual
        );
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertOnsDadosIndicadoresQualidadeEnergiaRedeBasicaDfpDesempenhoFrequenciaEmRegimePermanenteEntityAutoGeneratedPropertiesEquals(
        OnsDadosIndicadoresQualidadeEnergiaRedeBasicaDfpDesempenhoFrequenciaEmRegimePermanenteEntity expected,
        OnsDadosIndicadoresQualidadeEnergiaRedeBasicaDfpDesempenhoFrequenciaEmRegimePermanenteEntity actual
    ) {
        assertThat(actual)
            .as(
                "Verify OnsDadosIndicadoresQualidadeEnergiaRedeBasicaDfpDesempenhoFrequenciaEmRegimePermanenteEntity auto generated properties"
            )
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertOnsDadosIndicadoresQualidadeEnergiaRedeBasicaDfpDesempenhoFrequenciaEmRegimePermanenteEntityUpdatableFieldsEquals(
        OnsDadosIndicadoresQualidadeEnergiaRedeBasicaDfpDesempenhoFrequenciaEmRegimePermanenteEntity expected,
        OnsDadosIndicadoresQualidadeEnergiaRedeBasicaDfpDesempenhoFrequenciaEmRegimePermanenteEntity actual
    ) {
        assertThat(actual)
            .as("Verify OnsDadosIndicadoresQualidadeEnergiaRedeBasicaDfpDesempenhoFrequenciaEmRegimePermanenteEntity relevant properties")
            .satisfies(a -> assertThat(a.getIdPeriodicidade()).as("check idPeriodicidade").isEqualTo(expected.getIdPeriodicidade()))
            .satisfies(a -> assertThat(a.getDinReferencia()).as("check dinReferencia").isEqualTo(expected.getDinReferencia()))
            .satisfies(a -> assertThat(a.getNumDesvioPermSobre()).as("check numDesvioPermSobre").isEqualTo(expected.getNumDesvioPermSobre())
            )
            .satisfies(a -> assertThat(a.getNumDesvioPermSub()).as("check numDesvioPermSub").isEqualTo(expected.getNumDesvioPermSub()))
            .satisfies(a -> assertThat(a.getNumDesvioDistSobre()).as("check numDesvioDistSobre").isEqualTo(expected.getNumDesvioDistSobre())
            )
            .satisfies(a -> assertThat(a.getNumDesvioDistSub()).as("check numDesvioDistSub").isEqualTo(expected.getNumDesvioDistSub()))
            .satisfies(a -> assertThat(a.getNumMinutos()).as("check numMinutos").isEqualTo(expected.getNumMinutos()))
            .satisfies(a -> assertThat(a.getNumVioladodis()).as("check numVioladodis").isEqualTo(expected.getNumVioladodis()))
            .satisfies(a -> assertThat(a.getNumVioladoperm()).as("check numVioladoperm").isEqualTo(expected.getNumVioladoperm()))
            .satisfies(a -> assertThat(a.getValDfp()).as("check valDfp").isEqualTo(expected.getValDfp()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertOnsDadosIndicadoresQualidadeEnergiaRedeBasicaDfpDesempenhoFrequenciaEmRegimePermanenteEntityUpdatableRelationshipsEquals(
        OnsDadosIndicadoresQualidadeEnergiaRedeBasicaDfpDesempenhoFrequenciaEmRegimePermanenteEntity expected,
        OnsDadosIndicadoresQualidadeEnergiaRedeBasicaDfpDesempenhoFrequenciaEmRegimePermanenteEntity actual
    ) {
        // empty method
    }
}
